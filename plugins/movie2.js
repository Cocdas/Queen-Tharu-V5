const { cmd } = require('../command');
const config = require('../config');
const { fetchJson, sleep } = require('../lib/functions');
const prabathApi = "6467ad0b29"; // API key
const api = "https://prabath-md-api.up.railway.app/api/"; // Base API link

// Movie Command
cmd({
    pattern: "cmv",
    desc: "movie",
    category: "download",
    react: "üé¨",
    filename: __filename
}, async (conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply }) => {
    try {
        if (!q || !q.startsWith("https://cine")) {
            return reply("‚ùóÔ∏è ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂†‡∑í‡∂≠‡∑ä‚Äç‡∂ª‡∂¥‡∂ß‡∂∫‡∑ö ‡∑É‡∂∂‡∑ê‡∂≥‡∑í‡∂∫ ‡∑É‡∂¥‡∂∫‡∂±‡∑ä‡∂±.");
        }

        function input(put, from) {
            let [movie, quality = "480p", jid] = put.split(/\s*\|\s*/);

            if (!movie) {
                return reply("‚ùóÔ∏è ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂†‡∑í‡∂≠‡∑ä‚Äç‡∂ª‡∂¥‡∂ß ‡∂±‡∂∏‡∂ö‡∑ä ‡∑É‡∂¥‡∂∫‡∂±‡∑ä‡∂±.\n\n‡∂ã‡∂Ø‡∑è.:\n`cinesub avatar | 480p | 2715171516151658@g.us`");
            }

            const validQualities = ["360p", "480p", "720p", "1080p", "360", "480", "720", "1080"];
            if (!validQualities.includes(quality.toLowerCase())) {
                return reply("‚ö†Ô∏è *‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂¥‡∑ä‚Äç‡∂ª‡∂∏‡∑è‡∂´‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑î‡∂Ω‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±!*\n\n‡∂ã‡∂Ø‡∑è.:\n`cinesub avatar | 360p | 2715171516151658@g.us`");
            }

            if (!jid || (!jid.endsWith("@s.whatsapp.net") && !jid.endsWith("@g.us"))) {
                jid = from;
            }

            return { movie, quality, jid };
        }

        let link;
        const info = input(q, from);

        if (info.movie.startsWith("https://cine")) {
            link = info.movie;
        } else {
            let ddd = await fetchJson(`${api}cinesearch?q=${info.movie}&apikey=${prabathApi}`);
            link = ddd.data.data[0].link;
        }

        let desc = await fetchJson(`${api}cinemovie?url=${link}&apikey=${prabathApi}`);

        let movieTitle = desc.data.mainDetails.maintitle;
        let releaseDate = desc.data.mainDetails.dateCreated;
        let directorName = desc.data.moviedata.director;
        let country = desc.data.mainDetails.country;
        let duration = desc.data.mainDetails.runtime;
        let imdbRating = desc.data.moviedata.imdbRating;
        let qualities = desc.data.dllinks.directDownloadLinks.map(link => `> üñ•Ô∏è *${link.quality}* - ${link.size}`).join("\n");

        let template = `üé¨ *${movieTitle}*\n\n` +
                       `üìÖ *‡∂¥‡∑ä‚Äç‡∂ª‡∂†‡∑è‡∂ª‡∂´ ‡∂Ø‡∑í‡∂±‡∂∫* : ${releaseDate}\n` +
                       `üé• *‡∂Ö‡∂∞‡∑ä‚Äç‡∂∫‡∂ö‡∑ä‡∑Ç‡∂ö* : ${directorName}\n` +
                       `üåç *‡∂ª‡∂ß* : ${country}\n` +
                       `‚è≥ *‡∂ö‡∑è‡∂Ω‡∂∫* : ${duration}\n` +
                       `‚≠ê *IMDb ‡∂Ö‡∂ú‡∂∫* : ${imdbRating}\n\n` +
                       `‚öôÔ∏è *‡∂Ω‡∂∂‡∑è‡∂ú‡∂≠ ‡∑Ñ‡∑ê‡∂ö‡∑í ‡∂¥‡∑ä‚Äç‡∂ª‡∂∏‡∑è‡∂´‡∂∫‡∂±‡∑ä*:\n${qualities}\n\n` +
                       `üí¨ *‡∑É‡∑î‡∂¥‡∂ª‡∑ä‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω HC*` + 
                       `\n\n*CHAMI ‚Ä¢ ·¥ç·¥ú ü·¥õ…™ ·¥Ö·¥á·¥†…™·¥Ñ·¥á-·¥°·¥Ä- ô·¥è·¥õ „ãõ*`;

        await conn.sendMessage(info.jid, { image: { url: desc.data.mainDetails.imageUrl }, caption: template });
        
        function parseSize(sizeStr) {
            let sizeMatch = sizeStr.match(/^([\d.]+)\s*GB$/);
            return sizeMatch ? parseFloat(sizeMatch[1]) : 0;
        }

        function findLinkByInputQuality(inputQuality) {
            let jsonQuality = info.quality;
            if (!jsonQuality) return reply(`‚ùóÔ∏è *‡∂∏‡∑ô‡∂∏ ‡∂¥‡∑ä‚Äç‡∂ª‡∂∏‡∑è‡∂´‡∂∫ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠:* ${inputQuality}`);

            let linkData = desc.data.dllinks.directDownloadLinks.find(link => link.quality.includes(jsonQuality));
            if (linkData) {
                if (parseSize(linkData.size) > 2) {
                    return reply("*‚ùóÔ∏è 2GB ‡∂Ö‡∂∞‡∑í‡∂ö ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù WhatsApp ‡∂î‡∑É‡∑ä‡∑É‡∑ö ‡∂Ω‡∂∂‡∑è ‡∂ú‡∂≠ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö üò¢*");
                } else {
                    return linkData;
                }
            } else {
                return reply(`*‚ùóÔ∏è ${inputQuality} ‡∂¥‡∑ä‚Äç‡∂ª‡∂∏‡∑è‡∂´‡∂∫‡∑ö ‡∑É‡∂∂‡∑ê‡∂≥‡∑í‡∂∫‡∂ö‡∑ä ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠*`);
            }
        }

        let inputQuality = info.quality;
        let result = findLinkByInputQuality(inputQuality);

        let down = await fetchJson(`${api}cinedownload?url=${result.link}&apikey=${prabathApi}`);

        let senddoc = await conn.sendMessage(info.jid, { document: { url: down.data.direct }, mimetype: down.data.mimeType, fileName: down.data.fileName, caption: " ô ú·¥ÄÍú± ú…™ ‚Ä¢ ·¥ç·¥ú ü·¥õ…™ ·¥Ö·¥á·¥†…™·¥Ñ·¥á-·¥°·¥Ä- ô·¥è·¥õ „ãõ" });
        return await conn.sendMessage(info.jid, { react: { text: 'üé¨', key: senddoc.key } });

    } catch (e) {
        console.log(e);
        return reply("‚ö†Ô∏è *‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í‡∑Ä‡∑í‡∂∫*");
    }
});
